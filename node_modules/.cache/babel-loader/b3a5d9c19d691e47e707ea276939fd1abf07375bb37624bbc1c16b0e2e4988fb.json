{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Galaxy\\\\Desktop\\\\redux-toolkit\\\\src\\\\Users.js\",\n  _s = $RefreshSig$();\n// Importation du fichier CSS pour styliser le composant Users\nimport './App.css';\n\n// Importation des hooks useSelector et useDispatch de react-redux\nimport { useSelector, useDispatch } from 'react-redux';\n\n// Importation des actions deleteUser et updateNom depuis le fichier Users.js\nimport { deleteUser, updateNom } from './features/Users';\n\n// Importation du hook useState et useRef de React\nimport { useState, useRef } from 'react';\n\n// Définition du composant Users\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Users() {\n  _s();\n  // Sélection de la liste d'utilisateurs à partir du state global à l'aide du hook useSelector\n  const userList = useSelector(state => state.users.value);\n\n  // Obtention de la fonction dispatch à l'aide du hook useDispatch\n  const dispatch = useDispatch();\n\n  // État local pour stocker le nouveau nom lors de la mise à jour\n  const [nom, setNom] = useState('');\n\n  // Rendu du composant Users\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayUsers\",\n      children: userList.map((user, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [user.nom, \" \", user.prenom]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: event => setNom(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => dispatch(updateNom({\n              id: user.id,\n              nom: nom\n            })),\n            children: \"Update UserName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => dispatch(deleteUser({\n              id: user.id\n            })),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Users, \"FyaXForCZq4OwvZzeX9kcbRh0wY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["useSelector","useDispatch","deleteUser","updateNom","useState","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Users","_s","userList","state","users","value","dispatch","nom","setNom","children","className","map","user","index","prenom","fileName","_jsxFileName","lineNumber","columnNumber","onChange","event","target","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/Galaxy/Desktop/redux-toolkit/src/Users.js"],"sourcesContent":["// Importation du fichier CSS pour styliser le composant Users\r\nimport './App.css';\r\n\r\n// Importation des hooks useSelector et useDispatch de react-redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// Importation des actions deleteUser et updateNom depuis le fichier Users.js\r\nimport { deleteUser, updateNom } from './features/Users';\r\n\r\n// Importation du hook useState et useRef de React\r\nimport { useState, useRef } from 'react';\r\n\r\n// Définition du composant Users\r\nexport default function Users() {\r\n  // Sélection de la liste d'utilisateurs à partir du state global à l'aide du hook useSelector\r\n  const userList = useSelector((state) => state.users.value);\r\n\r\n  // Obtention de la fonction dispatch à l'aide du hook useDispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // État local pour stocker le nouveau nom lors de la mise à jour\r\n  const [nom, setNom] = useState('');\r\n\r\n  // Rendu du composant Users\r\n  return (\r\n    <>\r\n      <div className='displayUsers'>\r\n        {/* Boucle sur la liste d'utilisateurs et affichage de chaque utilisateur */}\r\n        {userList.map((user, index) => {\r\n          return (\r\n            <div key={index}>\r\n              {/* Affichage du nom et du prénom de l'utilisateur */}\r\n              <h1>{user.nom} {user.prenom}</h1>\r\n\r\n              {/* Champ de saisie pour le nouveau nom avec gestion de l'événement onChange */}\r\n              <input onChange={(event) => setNom(event.target.value)} />\r\n\r\n              {/* Bouton pour mettre à jour le nom de l'utilisateur */}\r\n              <button onClick={() => dispatch(updateNom({ id: user.id, nom: nom }))}>\r\n                Update UserName\r\n              </button>\r\n\r\n              {/* Bouton pour supprimer l'utilisateur */}\r\n              <button onClick={() => dispatch(deleteUser({ id: user.id }))}>\r\n                Delete\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAO,WAAW;;AAElB;AACA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;;AAEtD;AACA,SAASC,UAAU,EAAEC,SAAS,QAAQ,kBAAkB;;AAExD;AACA,SAASC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,eAAe,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EAC9B;EACA,MAAMC,QAAQ,GAAGZ,WAAW,CAAEa,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACC,KAAK,CAAC;;EAE1D;EACA,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM,CAACgB,GAAG,EAAEC,MAAM,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAElC;EACA,oBACEG,OAAA,CAAAE,SAAA;IAAAU,QAAA,eACEZ,OAAA;MAAKa,SAAS,EAAC,cAAc;MAAAD,QAAA,EAE1BP,QAAQ,CAACS,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;QAC7B,oBACEhB,OAAA;UAAAY,QAAA,gBAEEZ,OAAA;YAAAY,QAAA,GAAKG,IAAI,CAACL,GAAG,EAAC,GAAC,EAACK,IAAI,CAACE,MAAM;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAGjCrB,OAAA;YAAOsB,QAAQ,EAAGC,KAAK,IAAKZ,MAAM,CAACY,KAAK,CAACC,MAAM,CAAChB,KAAK;UAAE;YAAAU,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAG1DrB,OAAA;YAAQyB,OAAO,EAAEA,CAAA,KAAMhB,QAAQ,CAACb,SAAS,CAAC;cAAE8B,EAAE,EAAEX,IAAI,CAACW,EAAE;cAAEhB,GAAG,EAAEA;YAAI,CAAC,CAAC,CAAE;YAAAE,QAAA,EAAC;UAEvE;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAGTrB,OAAA;YAAQyB,OAAO,EAAEA,CAAA,KAAMhB,QAAQ,CAACd,UAAU,CAAC;cAAE+B,EAAE,EAAEX,IAAI,CAACW;YAAG,CAAC,CAAC,CAAE;YAAAd,QAAA,EAAC;UAE9D;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAfDL,KAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAgBV,CAAC;MAEV,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACN,CAAC;AAEP;AAACjB,EAAA,CAvCuBD,KAAK;EAAA,QAEVV,WAAW,EAGXC,WAAW;AAAA;AAAAiC,EAAA,GALNxB,KAAK;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}